name: Continuous Integration and Deployment Builds
on:
  push:

jobs:
  build_frontend:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "12"

      - name: Get NPM Cache Directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: NPM Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build
        run: |
          cd frontend
          npm run build -- --output-path=dist

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-dist
          path: frontend/dist/*

  build_backend:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.1

      - name: Install Dependencies
        run: dotnet restore ./backend/WebApi/WebApi.csproj

      - name: Build
        run: dotnet publish ./backend/WebApi/WebApi.csproj -c Release -o ./backend-dist

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: backend-dist
          path: backend-dist/*

  build_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        # Using bash substring manipulation
        # http://www.autoscorch.com/bsm
        id: prepare_build_docker
        env:
          # On PRs:
          # BRANCH_NAME: ${{ github.head_ref }}
          # On push:
          BRANCH_NAME: ${{ github.ref }}
          SHA: ${{ github.sha }}
        run: |
          echo "BRANCH_NAME_TAG: Replace foreslashes"
          BRANCH_NAME_PREP1=${BRANCH_NAME////-}
          echo BRANCH_NAME_PREP1: $BRANCH_NAME_PREP1
          echo ""
          echo "BRANCH_NAME_TAG: Replace underscores"
          BRANCH_NAME_PREP2=${BRANCH_NAME_PREP1//_/-}
          echo BRANCH_NAME_PREP2: $BRANCH_NAME_PREP2
          echo ""
          echo "BRANCH_NAME_TAG: Remove ref prefix"
          BRANCH_NAME_PREP3=${BRANCH_NAME_PREP2#refs-heads-}
          echo BRANCH_NAME_PREP3: $BRANCH_NAME_PREP3
          echo ""
          echo "BRANCH_NAME_TAG: Set variable"
          BRANCH_NAME_TAG=crohmcrms/crohm_crms:$BRANCH_NAME_PREP3
          echo BRANCH_NAME_TAG: $BRANCH_NAME_TAG
          echo "::set-output name=BRANCH_NAME_TAG::$BRANCH_NAME_TAG"
          echo ""
          echo "SHA_TAG: Set variable"
          SHA_TAG=crohmcrms/crohm_crms:sha-${SHA::7}
          echo SHA_TAG: $SHA_TAG
          echo "::set-output name=SHA_TAG::$SHA_TAG"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Docker Login
        uses: docker/login-action@v1.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ steps.prepare_build_docker.outputs.BRANCH_NAME_TAG }}
            ${{ steps.prepare_build_docker.outputs.SHA_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build_app:
    needs: [build_frontend, build_backend]
    runs-on: windows-latest
    steps:
      - name: Download Backend Artifact
        uses: actions/download-artifact@v2
        with:
          name: backend-dist
          path: app

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v2
        with:
          name: frontend-dist
          path: app/wwwroot

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-dist
          path: app/*

  test_integration:
    needs: build_docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Start Server
        run: bash ./misc/docker-compose-up.sh
      - name: Waiting for Server
        run: bash ./misc/wait-for-server.sh

      - name: Test
        uses: cypress-io/github-action@v2
        with:
          working-directory: tests

      - name: Collect Report
        if: ${{ always() }}
        uses: ashley-taylor/junit-report-annotations-action@1.3
        with:
          access-token: ${{ secrets.GITHUB_TOKEN }}
          path: tests/reports/cypress.xml

      - name: Stop Server
        if: ${{ always() }}
        run: bash ./misc/docker-compose-down.sh

      - name: Upload Screenshot Artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test_integration_screenshots
          path: tests/screenshots/*

      - name: Upload Video Artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test_integration_videos
          path: tests/videos/*
  # TODO: Cached builds on Push
